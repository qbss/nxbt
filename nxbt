#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - miscellaneous/nxbt
# Started On        - Fri  6 Oct 17:52:55 BST 2017
# Last Change       - Sat  7 Oct 16:05:33 BST 2017
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------

# This is somewhat of a fork of XBT, written by Joe Collins on October 4th, 2017:
#
# https://www.youtube.com/channel/UCTfabOKD7Yty6sDF4POBVqA
# http://www.ezeelinux.com/bash-scripts/
#
# NXBT (NEW XBT) IS A WORK IN PROGRESS.
#
# I think this is now done. Feel free to use it. I'll tweak it here and there, -
# adding features if I can think any up. If you'd like to make any suggestions, -
# please feel free to E-Mail me at my E-Mail address mentioned above.
#
# Tested as working on Linux Mint 18.2 with the Mate desktop environment.

#----------------------------------------------------------------------------------
#
#                      mm   m  mmmm mmmmmmm mmmmmm   m   
#                      #"m  # m"  "m   #    #        #   
#                      # #m # #    #   #    #mmmmm   #   
#                      #  # # #    #   #    #        "   
#                      #   ##  #mm#    #    #mmmmm   #   
#
#              This program is growing too big for miscellaneous
#            I'll be migrating it to a repository of its own soon.
#
#----------------------------------------------------------------------------------

# | Requirements:
# |
# | XBT should run on any currently supported Linux distribution with BASH. The
# | dedicated USB drive must be formatted to a Linux native file system such as
# | Ext4 to ensure that file permissions will be stored unchanged.
# |
# | …And away we go!
#
#                         - Joe Collins

#----------------------------------------------------------------------------------

declare -i SECONDS=0

XERR(){ echo "[L${1}] ERROR: $2" 1>&2; exit 1; }
ERR(){ echo "[L${1}] ERROR: $2" 1>&2; }

declare -i DEPCOUNT=0
for DEP in /usr/bin/rsync /bin/{mkdir,sync}; {
	[ -x "$DEP" ] || {
		ERR "$LINENO" "Dependency '$DEP' not met."
		DEPCOUNT+=1
	}
}

[ $DEPCOUNT -eq 0 ] || exit 1

shopt -s extglob

USAGE(){
	while read -r; do
		echo "$REPLY"
	done <<-EOF
		            NXBT - NEW XBT (7th October 2017)
		            Written by terminalforlife (terminalforlife@yahoo.com)
		
		            A fork and improvement of the XBT program written by Joe Collins.

		SYNTAX:     nxbt [OPTS] TARGET
		
		OPTS:       --help|-h|-?            - Displays this help information.
		            --debug                 - Enables the built-in bash debugging.
		            --quiet|-q              - Runs in quiet mode. Errors still output.
		            --log|-l PATH           - Choose a different location for the logfile.
		            --source|-s PATH        - Choose a different location to back up.

		NOTE:       Where TARGET is the location to store the backed up files. The files
		            will be stored within a timestamped directory. An example TARGET:

		              nxbt /media/\$USER/Backup_Drive/

		FILE:       By default, errors are redirected to: /tmp/nxbt_\$USER_\$$.log
	EOF
}

while [ -n "$1" ]; do
	case "$1" in
		--help|-h|-\?)
			USAGE; exit 0 ;;
		--debug)
			DEBUGME="true" ;;
		--quiet|-q)
			BEQUIET="true" ;;
		--logfile)
			shift

			[ -d "${1%\/*}" ] && LOGFILE="$1" || {
				XERR "$LINENO" "Logfile directory not found."
			} ;;
		--source)
			#TODO - Incorporate multiple optional sources.
			shift

			[ -d "${1%\/*}" ] && SOURCE="$1" || {
				XERR "$LINENO" "Source directory not found."
			} ;;
		*)
			break ;;
	esac

	shift
done

#XERR "$LINENO" "Incorrect option(s) specified." ;;
[ "$BEQUIET" == "true" ] && exec 1> /dev/null
[ "$DEBUGME" == "true" ] && set -xeu

[ -d "$*" ] || XERR "$LINENO" "Unable to find or access the TARGET directory."

TARGET="$*"
[ -f "$TARGET" ] && XERR "Target is not a directory."
[[ "$TARGET" == */ ]] || TARGET+="/"

CURDATE=`printf '%(%F_%X)T'`
#TODO - Make the logfile skip the whole /tmp part; redundant.
LOGFILE="/tmp/nxbt_${USER}_${CURDATE}.log"
BACKNAME="NXBT_${UID}_${CURDATE}"
[ -d "$BACKNAME" ] || /bin/mkdir "${TARGET}${BACKNAME}"

#TODO - Fix this not showing up in the logfile.
printf "[+%0.7d] LOGGING: %s\n" "$SECONDS" "$LOGFILE"
printf "[%s]: TARGET='%s' FROM='%s' USER='%s' UID:GID='%s:%s'\n"\
	"${CURDATE:-???}" "${TARGET:-???}" "${HOSTNAME:-???}"\
	"${USER:-???}" "${UID:-???}" "${GID:-???}" > "$LOGFILE"

#TODO - Add ability to back up usual sources plus the user's --source.
[ -z "$SOURCE" ] && {
	# Back up home files.
	printf "[+%0.7d] PROCESSING: %s\n" "$SECONDS" "$HOME"
	TARGETPATH="${TARGET}${BACKNAME}/$USER/"
	[ -d "$TARGETPATH" ] || /bin/mkdir "$TARGETPATH"
	/usr/bin/rsync -a --delete --info=progress2 "$HOME" "$TARGETPATH" 2> "$LOGFILE"

	# Back up etc files.
	printf "[+%0.7d] PROCESSING: %s\n" "$SECONDS" "/etc"
	TARGETPATH="${TARGET}${BACKNAME}/etc/"
	[ -d "$TARGETPATH" ] || /bin/mkdir "$TARGETPATH"
	/usr/bin/rsync -a --delete --info=progress2 "/etc" "$TARGETPATH" 2> "$LOGFILE"
} || {
	# Back up user-provided files.
	printf "[+%0.7d] PROCESSING: %s\n" "$SECONDS" "$SOURCE"
	TARGETPATH="${TARGET}/${BACKNAME}/${SOURCE//*\/}"
	[ -d "$TARGETPATH" ] || /bin/mkdir "$TARGETPATH"
	/usr/bin/rsync -a --delete --info=progress2 "$SOURCE" "$TARGETPATH"/ 2> "$LOGFILE"
}

printf "[+%0.7d] SYNCHRONIZING...\n" "$SECONDS"
/bin/sync 

([ -f "$LOGFILE" ] || ERR "$LINENO" "Logfile not found.") || {
	readarray REPLY < "$LOGFILE"

	[ -n "${REPLY[*]}" ] && {
		printf "[+%0.7d] SAVING: %s\n" "$SECONDS"\
			"${TARGET}${BACKNAME}/${LOGFILE//*\/}"

		< "$LOGFILE" > "${TARGET}${BACKNAME}/${LOGFILE//*\/}"
	} || {
		printf "[+%0.7d] CLEANING: %s\n" "$SECONDS" "$LOGFILE"
	}
}

#TODO - Add feature to show the line count of the logfile.

while read -r; do
	echo "$REPLY"
done <<-EOF

	+—————–––––––––––+
	| All backed up! |
	+—————–––––––––––+

	TIME: ${SECONDS:-???}s
	LINE: ${ERRCOUNT:-???}
EOF

[ "$DEBUGME" == "true" ] && set +xeu || exit 0
